import SwiftUI
import Foundation

// Add reference to CircleDataModels.swift for data types

// MARK: - Group Tab Enum
enum GroupTab: CaseIterable {
    case dashboard
    case home
    case calendar
}

// MARK: - Announcement Data Model
struct AnnouncementModel: Identifiable, Codable {
    let id: Int
    let user: String
    let title: String
    let content: String
    let announced_at: String
    
    init(id: Int, user: String, title: String, content: String, announced_at: String) {
        self.id = id
        self.user = user
        self.title = title
        self.content = content
        self.announced_at = announced_at
    }
}

struct PageGroupchats: View {
    @State private var showSettingsMenu = false
    @State private var showLeaveConfirmation = false
    @State private var navigateToMembers = false
    @State private var showMoreMenu = false
    @State private var userProfileImageURL: String = ""
    @State private var unreadMessageCount: Int = 0

    let circle: CircleData
    private let baseURL = "http://localhost:8000/api/"
    
    @State private var showDeleteConfirmation = false
    @State private var deleteInputText = ""
    @State private var showManageChannels = false

    @State private var myCircles: [CircleData] = []

    @Environment(\.presentationMode) var presentationMode
    @AppStorage("user_id") private var userId: Int = 0
    @State private var loading = true
    @AppStorage("last_circle_id") private var lastCircleId: Int = 0

    @State private var circles: [CircleData] = []
    @State private var channels: [Channel] = []
    var groupedChannels: [String: [Channel]] {
        Dictionary(grouping: channels) { $0.name.prefix(1).uppercased() }
    }



   
    @State private var selectedGroup: String
   
    @State private var showCircleAboutPopup = false

    init(circle: CircleData) {
            self.circle = circle
            _selectedGroup = State(initialValue: circle.name)
            lastCircleId = circle.id // 👈 Save the visited circle ID

        }

    @State private var threads: [ThreadPost] = []
    @State private var showCreateThreadPopup = false
    @State private var newThreadContent: String = ""
    
<<<<<<< Updated upstream:pagegroupchats new
    // Poll creation states
    @State private var isCreatingPoll = false
    @State private var pollTitle: String = ""
    @State private var pollOptions: [String] = ["", ""]
    @State private var showAddOption = false
    
    // Announcement states
=======
    // MARK: - Announcement State Variables
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
    @State private var announcements: [AnnouncementModel] = []
    @State private var showCreateAnnouncementPopup = false
    @State private var newAnnouncementTitle: String = ""
    @State private var newAnnouncementContent: String = ""
<<<<<<< Updated upstream:pagegroupchats new
=======
    @State private var showAnnouncementCreationSuccess = false

    // MARK: - Tab Navigation State
    @State private var selectedTab: GroupTab = .home

    // MARK: - Tab Content Views
    private var dashboardContent: some View {
        DashboardView(circle: circle)
    }
    
    private var homeContent: some View {
        ScrollView {
            VStack(alignment: .center, spacing: 12) {
                // Circle Selector and Settings Header
                CircleSelectorHeader(
                    circle: circle,
                    myCircles: myCircles,
                    showSettingsMenu: $showSettingsMenu,
                    userId: userId
                )
                
                // Announcements Section
                AnnouncementsSection(
                    announcements: announcements,
                    showCreateAnnouncementPopup: $showCreateAnnouncementPopup,
                    userId: userId,
                    circle: circle
                )
                
                // Enhanced Success Message for Announcement Creation
                if showAnnouncementCreationSuccess {
                    VStack(spacing: 12) {
                        HStack(spacing: 12) {
                            Image(systemName: "checkmark.circle.fill")
                                .font(.system(size: 24, weight: .bold))
                                .foregroundColor(.green)
                            
                            VStack(alignment: .leading, spacing: 2) {
                                Text("Announcement Posted!")
                                    .font(.system(size: 16, weight: .bold))
                                    .foregroundColor(.primary)
                                
                                Text("Your announcement has been shared with the circle")
                                    .font(.system(size: 13, weight: .medium))
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                        }
                        .padding(16)
                        .background(
                            RoundedRectangle(cornerRadius: 12)
                                .fill(Color.green.opacity(0.1))
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.green.opacity(0.2), lineWidth: 1)
                                )
                        )
                        .padding(.horizontal, 20)
                    }
                    .transition(.asymmetric(insertion: .move(edge: .top).combined(with: .opacity), removal: .opacity))
                    .onAppear {
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                            withAnimation(.easeOut(duration: 0.5)) {
                                showAnnouncementCreationSuccess = false
                            }
                        }
                    }
                }
                
                // Threads Section
                ThreadsSection(
                    threads: threads,
                    circle: circle,
                    showCreateThreadPopup: $showCreateThreadPopup
                )
                
                // Channels Section
                ChannelsSection(channels: channels, circle: circle)
            }
        }
    }
    
    private var calendarContent: some View {
        CalendarView(circle: circle)
    }
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift


    var body: some View {
        ZStack {
            // Enhanced background gradient
            LinearGradient(
                gradient: Gradient(colors: [
                    Color(.systemBackground),
                    Color(hex: "004aad").opacity(0.02)
                ]),
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            VStack(spacing: 0) {
                headerSection
<<<<<<< Updated upstream:pagegroupchats new

                    // Group Selector
                    VStack(alignment: .center, spacing: 12) {
                        HStack(spacing: 16) {
                            // Enhanced Dropdown menu with gradient and shadow
                            Menu {
                                ForEach(myCircles, id: \.id) { circl in
                                    NavigationLink(destination: PageGroupchats(circle: circl).navigationBarBackButtonHidden(true)) {
                                        Text(circl.name)
                                    }
                                }
                            } label: {
                                HStack(spacing: 8) {
                                    Text(circle.name)
                                        .foregroundColor(.primary)
                                        .font(.system(size: 18, weight: .semibold))

                                    Image(systemName: "chevron.down")
                                        .foregroundColor(Color(hex: "004aad"))
                                        .font(.system(size: 14, weight: .medium))
                                }
                                .padding(.horizontal, 20)
                                .padding(.vertical, 16)
                                .frame(minWidth: 0, maxWidth: .infinity)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(Color.white)
                                        .shadow(color: Color.black.opacity(0.08), radius: 8, x: 0, y: 2)
                                )
                                .overlay(
                                    RoundedRectangle(cornerRadius: 16)
                                        .stroke(Color(hex: "004aad").opacity(0.1), lineWidth: 1)
                                )
                            }
                            .frame(maxWidth: UIScreen.main.bounds.width * 0.72)

                            // Enhanced Gear icon with modern styling
                            Button(action: {
                                withAnimation(.spring(response: 0.6, dampingFraction: 0.8)) {
                                    showSettingsMenu.toggle()
                                }
                            }) {
                                Image(systemName: "gearshape.fill")
                                    .font(.system(size: 18, weight: .medium))
                                    .foregroundColor(Color(hex: "004aad"))
                                    .frame(width: 48, height: 48)
                                    .background(
                                        Circle()
                                            .fill(Color.white)
                                            .shadow(color: Color.black.opacity(0.08), radius: 8, x: 0, y: 2)
                                    )
                                    .overlay(
                                        Circle()
                                            .stroke(Color(hex: "004aad").opacity(0.1), lineWidth: 1)
                                    )
                            }
                            .scaleEffect(showSettingsMenu ? 1.1 : 1.0)
                            .animation(.spring(response: 0.3, dampingFraction: 0.6), value: showSettingsMenu)
                        }
                        .padding(.horizontal, 20)
                        .padding(.top, 16)

                        // Enhanced Moderator label with modern badge styling
                        if userId == circle.creatorId {
                            HStack(spacing: 6) {
                                Image(systemName: "crown.fill")
                                    .font(.system(size: 12, weight: .medium))
                                    .foregroundColor(Color(hex: "004aad"))
                                
                                Text("Circle Moderator")
                                    .font(.system(size: 13, weight: .medium))
                                    .foregroundColor(Color(hex: "004aad"))
                            }
                            .padding(.horizontal, 12)
                            .padding(.vertical, 6)
                            .background(
                                Capsule()
                                    .fill(Color(hex: "004aad").opacity(0.1))
                            )
                            .overlay(
                                Capsule()
                                    .stroke(Color(hex: "004aad").opacity(0.2), lineWidth: 1)
                            )
                            .padding(.vertical, 5)
                        }
                    }
                    .padding(.bottom, 5)

                // Announcements Section
                if !announcements.isEmpty {
                    VStack(spacing: 8) {
                        ForEach(announcements.prefix(3)) { announcement in
                            AnnouncementBanner(announcement: announcement)
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.vertical, 8)
                }

                //Enhanced Circle Threads Section
                    VStack(alignment: .leading, spacing: 12) {
                        HStack {
                            VStack(alignment: .leading, spacing: 2) {
                                Text("Circle Threads")
                                    .font(.system(size: 20, weight: .bold))
                                    .foregroundColor(.primary)
                                
                                Text("Share ideas and discussions")
                                    .font(.system(size: 13, weight: .medium))
                                    .foregroundColor(.secondary)
                            }

                            Spacer()

                            Button(action: {
                                showCreateThreadPopup = true
                            }) {
                                HStack(spacing: 6) {
                                    Image(systemName: "plus")
                                        .font(.system(size: 14, weight: .semibold))
                                    Text("New")
                                        .font(.system(size: 14, weight: .semibold))
                                }
                                .foregroundColor(.white)
                                .padding(.horizontal, 14)
                                .padding(.vertical, 8)
                                .background(
                                    Capsule()
                                        .fill(
                                            LinearGradient(
                                                gradient: Gradient(colors: [Color(hex: "004aad"), Color(hex: "0066dd")]),
                                                startPoint: .leading,
                                                endPoint: .trailing
                                            )
                                        )
                                        .shadow(color: Color(hex: "004aad").opacity(0.3), radius: 6, x: 0, y: 3)
                                )
                            }
                            .scaleEffect(showCreateThreadPopup ? 0.95 : 1.0)
                            .animation(.spring(response: 0.3, dampingFraction: 0.6), value: showCreateThreadPopup)
                        }
                        .padding(.horizontal, 20)
                        
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 12) {
                                ForEach(threads) { thread in
                                    ThreadCard(thread: thread)
                                        .frame(width: 300)
                                }
                                
                                // Empty state card when no threads
                                if threads.isEmpty {
                                    VStack(spacing: 8) {
                                        Image(systemName: "bubble.left.and.bubble.right")
                                            .font(.system(size: 28))
                                            .foregroundColor(Color(hex: "004aad").opacity(0.4))
                                        
                                        Text("No threads yet")
                                            .font(.system(size: 15, weight: .medium))
                                            .foregroundColor(.secondary)
                                        
                                        Text("Be the first to start a discussion!")
                                            .font(.system(size: 13))
                                            .foregroundColor(.secondary)
                                            .multilineTextAlignment(.center)
                                    }
                                    .frame(width: 260, height: 120)
                                    .background(
                                        RoundedRectangle(cornerRadius: 16)
                                            .fill(Color(hex: "004aad").opacity(0.05))
                                            .overlay(
                                                RoundedRectangle(cornerRadius: 16)
                                                    .strokeBorder(style: StrokeStyle(lineWidth: 1, dash: [8, 4]))
                                                    .foregroundColor(Color(hex: "004aad").opacity(0.1))
                                            )
                                    )
                                }
                            }
                            .padding(.horizontal, 20)
                        }
                    }
                    .padding(.vertical, 6)

                    // Enhanced Divider
                    Rectangle()
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [Color.clear, Color(hex: "004aad").opacity(0.2), Color.clear]),
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .frame(height: 1)
                        .padding(.horizontal, 20)
                        .padding(.vertical, 8)
                    
                    // Enhanced Channels Section
                    ScrollView {
                        VStack(alignment: .leading, spacing: 18) {
                            // Channels Header
                            HStack {
                                VStack(alignment: .leading, spacing: 2) {
                                    Text("Channels")
                                        .font(.system(size: 20, weight: .bold))
                                        .foregroundColor(.primary)
                                    
                                    Text("Join conversations by topic")
                                        .font(.system(size: 13, weight: .medium))
                                        .foregroundColor(.secondary)
                                }
                                
                                Spacer()
                                
                                Text("\(channels.count) channels")
                                    .font(.system(size: 12, weight: .medium))
                                    .foregroundColor(Color(hex: "004aad"))
                                    .padding(.horizontal, 10)
                                    .padding(.vertical, 4)
                                    .background(
                                        Capsule()
                                            .fill(Color(hex: "004aad").opacity(0.1))
                                    )
                            }
                            .padding(.horizontal, 20)
                            
                            if !channels.isEmpty {
                                ForEach(groupedChannels.keys.sorted(), id: \.self) { category in
                                    if let categoryChannels = groupedChannels[category] {
                                        VStack(alignment: .leading, spacing: 8) {
                                            // Category Header
                                            HStack {
                                                Text(category)
                                                    .font(.system(size: 16, weight: .semibold))
                                                    .foregroundColor(.primary)
                                                
                                                Rectangle()
                                                    .fill(Color(hex: "004aad").opacity(0.2))
                                                    .frame(height: 1)
                                                    .frame(maxWidth: .infinity)
                                            }
                                            .padding(.horizontal, 20)

                                            // Enhanced Channel Cards
                                            VStack(spacing: 6) {
                                                ForEach(categoryChannels) { channel in
                                                    NavigationLink(destination: PageCircleMessages(channel: channel, circleName: circle.name)) {
                                                        HStack(spacing: 10) {
                                                            // Channel icon
                                                            Image(systemName: "number")
                                                                .font(.system(size: 14, weight: .medium))
                                                                .foregroundColor(Color(hex: "004aad"))
                                                                .frame(width: 28, height: 28)
                                                                .background(
                                                                    Circle()
                                                                        .fill(Color(hex: "004aad").opacity(0.1))
                                                                )
                                                            
                                                            VStack(alignment: .leading, spacing: 2) {
                                                                Text(channel.name)
                                                                    .font(.system(size: 15, weight: .medium))
                                                                    .foregroundColor(.primary)
                                                                
                                                                Text("Tap to join conversation")
                                                                    .font(.system(size: 12))
                                                                    .foregroundColor(.secondary)
                                                            }
                                                            
                                                            Spacer()
                                                            
                                                            Image(systemName: "chevron.right")
                                                                .font(.system(size: 11, weight: .medium))
                                                                .foregroundColor(.secondary)
                                                        }
                                                        .padding(.horizontal, 16)
                                                        .padding(.vertical, 12)
                                                        .background(
                                                            RoundedRectangle(cornerRadius: 10)
                                                                .fill(Color.white)
                                                                .shadow(color: Color.black.opacity(0.04), radius: 4, x: 0, y: 1)
                                                        )
                                                        .overlay(
                                                            RoundedRectangle(cornerRadius: 10)
                                                                .stroke(Color(hex: "004aad").opacity(0.08), lineWidth: 1)
                                                        )
                                                        .padding(.horizontal, 16)
                                                    }
                                                    .buttonStyle(PlainButtonStyle())
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                // Enhanced Empty State
                                VStack(spacing: 12) {
                                    Image(systemName: "bubble.left.and.bubble.right.fill")
                                        .font(.system(size: 40))
                                        .foregroundColor(Color(hex: "004aad").opacity(0.4))
                                    
                                    Text("No channels available")
                                        .font(.system(size: 16, weight: .semibold))
                                        .foregroundColor(.primary)
                                    
                                    Text("Channels will appear here once they're created by moderators")
                                        .font(.system(size: 13))
                                        .foregroundColor(.secondary)
                                        .multilineTextAlignment(.center)
                                        .padding(.horizontal, 30)
                                }
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 30)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(Color(hex: "004aad").opacity(0.05))
                                        .overlay(
                                            RoundedRectangle(cornerRadius: 16)
                                                .stroke(Color(hex: "004aad").opacity(0.1), lineWidth: 1)
                                        )
                                )
                                .padding(.horizontal, 16)
                            }
                        }
                        .padding(.top, 6)
                        .padding(.bottom, 100) // Space for bottom navigation
                    }


                    Spacer()
                }
                .sheet(isPresented: $showCreateThreadPopup) {
                    NavigationView {
                        VStack(spacing: 20) {
                            // Header
                            HStack {
                                Button("Cancel") {
                                    resetPostForm()
                                    showCreateThreadPopup = false
                                }
                                .foregroundColor(.secondary)
                                
                                Spacer()
                                
                                Text(isCreatingPoll ? "Create Poll" : "New Post")
                                    .font(.headline)
                                    .fontWeight(.semibold)
                                
                                Spacer()
                                
                                Button("Post") {
                                    if isCreatingPoll {
                                        postNewPoll()
                                    } else {
                                        postNewThread()
                                    }
                                    resetPostForm()
                                    showCreateThreadPopup = false
                                }
                                .foregroundColor(canPost ? Color(hex: "004aad") : .secondary)
                                .fontWeight(.semibold)
                                .disabled(!canPost)
                            }
                            .padding(.horizontal)
                            
                            // Post type selector
                            HStack(spacing: 16) {
                                Button(action: {
                                    isCreatingPoll = false
                                }) {
                                    HStack(spacing: 8) {
                                        Image(systemName: "text.bubble")
                                            .font(.system(size: 16))
                                        Text("Post")
                                            .font(.system(size: 14, weight: .medium))
                                    }
                                    .foregroundColor(isCreatingPoll ? .secondary : Color(hex: "004aad"))
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 8)
                                    .background(
                                        RoundedRectangle(cornerRadius: 20)
                                            .fill(isCreatingPoll ? Color.clear : Color(hex: "004aad").opacity(0.1))
                                    )
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 20)
                                            .stroke(isCreatingPoll ? Color.secondary.opacity(0.3) : Color(hex: "004aad"), lineWidth: 1)
                                    )
                                }
                                
                                Button(action: {
                                    isCreatingPoll = true
                                }) {
                                    HStack(spacing: 8) {
                                        Image(systemName: "chart.bar")
                                            .font(.system(size: 16))
                                        Text("Poll")
                                            .font(.system(size: 14, weight: .medium))
                                    }
                                    .foregroundColor(!isCreatingPoll ? .secondary : Color(hex: "004aad"))
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 8)
                                    .background(
                                        RoundedRectangle(cornerRadius: 20)
                                            .fill(!isCreatingPoll ? Color.clear : Color(hex: "004aad").opacity(0.1))
                                    )
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 20)
                                            .stroke(!isCreatingPoll ? Color.secondary.opacity(0.3) : Color(hex: "004aad"), lineWidth: 1)
                                    )
                                }
                                
                                Spacer()
                            }
                            .padding(.horizontal)
                            
                            ScrollView {
                                VStack(spacing: 16) {
                                    // Content field
                                    VStack(alignment: .leading, spacing: 8) {
                                        Text(isCreatingPoll ? "Poll Description" : "What's on your mind?")
                                            .font(.system(size: 14, weight: .medium))
                                            .foregroundColor(.secondary)
                                        
                                        TextEditor(text: $newThreadContent)
                                            .frame(minHeight: 80)
                                            .padding(12)
                                            .background(Color(.systemGray6))
                                            .cornerRadius(12)
                                            .overlay(
                                                RoundedRectangle(cornerRadius: 12)
                                                    .stroke(Color(.systemGray4), lineWidth: 1)
                                            )
                                    }
                                    .padding(.horizontal)
                                    
                                    // Poll-specific fields
                                    if isCreatingPoll {
                                        VStack(alignment: .leading, spacing: 16) {
                                            // Poll title
                                            VStack(alignment: .leading, spacing: 8) {
                                                Text("Poll Question")
                                                    .font(.system(size: 14, weight: .medium))
                                                    .foregroundColor(.secondary)
                                                
                                                TextField("Ask a question...", text: $pollTitle)
                                                    .padding(12)
                                                    .background(Color(.systemGray6))
                                                    .cornerRadius(12)
                                                    .overlay(
                                                        RoundedRectangle(cornerRadius: 12)
                                                            .stroke(Color(.systemGray4), lineWidth: 1)
                                                    )
                                            }
                                            
                                            // Poll options
                                            VStack(alignment: .leading, spacing: 12) {
                                                Text("Options")
                                                    .font(.system(size: 14, weight: .medium))
                                                    .foregroundColor(.secondary)
                                                
                                                ForEach(0..<pollOptions.count, id: \.self) { index in
                                                    HStack {
                                                        TextField("Option \(index + 1)", text: $pollOptions[index])
                                                            .padding(12)
                                                            .background(Color(.systemGray6))
                                                            .cornerRadius(12)
                                                            .overlay(
                                                                RoundedRectangle(cornerRadius: 12)
                                                                    .stroke(Color(.systemGray4), lineWidth: 1)
                                                            )
                                                        
                                                        if pollOptions.count > 2 {
                                                            Button(action: {
                                                                pollOptions.remove(at: index)
                                                            }) {
                                                                Image(systemName: "minus.circle.fill")
                                                                    .foregroundColor(.red)
                                                                    .font(.system(size: 20))
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                if pollOptions.count < 5 {
                                                    Button(action: {
                                                        pollOptions.append("")
                                                    }) {
                                                        HStack {
                                                            Image(systemName: "plus.circle")
                                                                .foregroundColor(Color(hex: "004aad"))
                                                            Text("Add Option")
                                                                .foregroundColor(Color(hex: "004aad"))
                                                                .font(.system(size: 14, weight: .medium))
                                                        }
                                                        .padding(.vertical, 8)
                                                    }
                                                }
                                            }
                                        }
                                        .padding(.horizontal)
                                    }
                                }
                            }
                            
                            Spacer()
                        }
                        .background(Color(.systemBackground))
                    }
                    .onDisappear {
                        resetPostForm()
                    }
                }
                .sheet(isPresented: $showCircleAboutPopup) {
                    CirclPopupCard(circle: circle, isMember: true)
                }
                .sheet(isPresented: $showManageChannels) {
                    ManageChannelsView(circleId: circle.id, channels: $channels)
                        .onDisappear {
                            // Refresh channels when returning from manage view
                            fetchChannels(for: circle.id)
                        }
                }
                .sheet(isPresented: $showCreateAnnouncementPopup) {
                    NavigationView {
                        VStack(spacing: 20) {
                            // Header
                            HStack {
                                Button("Cancel") {
                                    resetAnnouncementForm()
                                    showCreateAnnouncementPopup = false
                                }
                                .foregroundColor(.secondary)
                                
                                Spacer()
                                
                                Text("Create Announcement")
                                    .font(.headline)
                                    .fontWeight(.semibold)
                                
                                Spacer()
                                
                                Button("Post") {
                                    postNewAnnouncement()
                                    resetAnnouncementForm()
                                    showCreateAnnouncementPopup = false
                                }
                                .foregroundColor(canPostAnnouncement ? Color(hex: "004aad") : .secondary)
                                .fontWeight(.semibold)
                                .disabled(!canPostAnnouncement)
                            }
                            .padding(.horizontal)
                            
                            ScrollView {
                                VStack(spacing: 16) {
                                    // Title field
                                    VStack(alignment: .leading, spacing: 8) {
                                        Text("Announcement Title")
                                            .font(.system(size: 14, weight: .medium))
                                            .foregroundColor(.secondary)
                                        
                                        TextField("Enter announcement title...", text: $newAnnouncementTitle)
                                            .padding(12)
                                            .background(Color(.systemGray6))
                                            .cornerRadius(12)
                                            .overlay(
                                                RoundedRectangle(cornerRadius: 12)
                                                    .stroke(Color(.systemGray4), lineWidth: 1)
                                            )
                                    }
                                    .padding(.horizontal)
                                    
                                    // Content field
                                    VStack(alignment: .leading, spacing: 8) {
                                        Text("Announcement Content")
                                            .font(.system(size: 14, weight: .medium))
                                            .foregroundColor(.secondary)
                                        
                                        TextEditor(text: $newAnnouncementContent)
                                            .frame(minHeight: 120)
                                            .padding(12)
                                            .background(Color(.systemGray6))
                                            .cornerRadius(12)
                                            .overlay(
                                                RoundedRectangle(cornerRadius: 12)
                                                    .stroke(Color(.systemGray4), lineWidth: 1)
                                            )
                                    }
                                    .padding(.horizontal)
                                }
                            }
                            
                            Spacer()
                        }
                        .background(Color(.systemBackground))
                    }
                    .onDisappear {
                        resetAnnouncementForm()
                    }
                }

                // 🔻 Add this just ABOVE `floatingButton` inside the ZStack
                if showSettingsMenu {
                    ZStack {
                        // FULL invisible blocker
                        Color.clear
                            .ignoresSafeArea()
                            .contentShape(Rectangle())
                            .onTapGesture {
                                withAnimation {
                                    showSettingsMenu = false
                                }
                            }

                        // Dimmed background that can't pass touches
                        Color.black.opacity(0.3)
                            .ignoresSafeArea()
                            .allowsHitTesting(false) // 🔐 block interaction passing

                        // Floating menu under gear icon
                        VStack(alignment: .leading, spacing: 0) {
                            Button(action: {
                                showCircleAboutPopup = true
                            }) {
                                GroupMenuItem(icon: "info.circle.fill", title: "About This Circle")
                            }
                            .buttonStyle(PlainButtonStyle())

                          
                            Button(action: {
                                navigateToMembers = true
                                showSettingsMenu = false
                            }) {
                                GroupMenuItem(icon: "person.2.fill", title: "Members List")
                            }
                            .buttonStyle(PlainButtonStyle())

                          

                            Divider()

                            Button(action: {
                                showLeaveConfirmation = true
                                showSettingsMenu = false
                            }) {
                                GroupMenuItem(icon: "rectangle.portrait.and.arrow.right.fill", title: "Leave Circle", isDestructive: true)
                            }
                            .buttonStyle(PlainButtonStyle())

                            if userId == circle.creatorId {
                                Divider()

                                Text("Moderator Options")
                                    .font(.footnote)
                                    .foregroundColor(.gray)
                                    .padding(.horizontal)
                                    .padding(.top, 8)

                                Button(action: {
                                    showManageChannels = true
                                    showSettingsMenu = false
                                }) {
                                    GroupMenuItem(icon: "slider.horizontal.3", title: "Manage Channels")
                                }
                                .buttonStyle(PlainButtonStyle())
                                
                                Button(action: {
                                    showCreateAnnouncementPopup = true
                                    showSettingsMenu = false
                                }) {
                                    GroupMenuItem(icon: "megaphone.fill", title: "Create Announcement")
                                }
                                .buttonStyle(PlainButtonStyle())
                                
                                Button(action: {
                                    showDeleteConfirmation = true
                                    showSettingsMenu = false
                                }) {
                                    GroupMenuItem(icon: "trash.fill", title: "Delete Circle", isDestructive: true)
                                }
                                .buttonStyle(PlainButtonStyle())

                            }

                        }
                        .background(Color(.systemGray6))
                        .cornerRadius(12)
                        .shadow(radius: 5)
                        .frame(width: 250)
                        .padding(.top, -150)  // 🔁 adjust to move under gear
                        .padding(.trailing, 16)
                        .frame(maxWidth: .infinity, alignment: .topTrailing)

                    }
                    .zIndex(999)
                }
                
                // MARK: - Twitter/X Style Bottom Navigation
                VStack {
                    Spacer()
                    
                    HStack(spacing: 0) {
                        // Forum / Home
                        NavigationLink(destination: PageForum().navigationBarBackButtonHidden(true)) {
                            VStack(spacing: 4) {
                                Image(systemName: "house")
                                    .font(.system(size: 22, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                                Text("Home")
                                    .font(.system(size: 10, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                            }
                            .frame(maxWidth: .infinity)
                        }
                        .transaction { transaction in
                            transaction.disablesAnimations = true
                        }
                        
                        // Connect and Network
                        NavigationLink(destination: PageMyNetwork().navigationBarBackButtonHidden(true)) {
                            VStack(spacing: 4) {
                                Image(systemName: "person.2")
                                    .font(.system(size: 22, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                                Text("Network")
                                    .font(.system(size: 10, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                            }
                            .frame(maxWidth: .infinity)
                        }
                        .transaction { transaction in
                            transaction.disablesAnimations = true
                        }
                        
                        // Circles (Current page - highlighted)
                        VStack(spacing: 4) {
                            Image(systemName: "circle.grid.2x2.fill")
                                .font(.system(size: 22, weight: .medium))
                                .foregroundColor(Color(hex: "004aad"))
                            Text("Circles")
                                .font(.system(size: 10, weight: .medium))
                                .foregroundColor(Color(hex: "004aad"))
                        }
                        .frame(maxWidth: .infinity)
                        
                        // Business Profile
                        NavigationLink(destination: PageBusinessProfile().navigationBarBackButtonHidden(true)) {
                            VStack(spacing: 4) {
                                Image(systemName: "building.2")
                                    .font(.system(size: 22, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                                Text("Business")
                                    .font(.system(size: 10, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                            }
                            .frame(maxWidth: .infinity)
                        }
                        .transaction { transaction in
                            transaction.disablesAnimations = true
                        }
                        
                        // More / Additional Resources
                        Button(action: {
                            withAnimation(.easeInOut(duration: 0.3)) {
                                showMoreMenu.toggle()
                            }
                        }) {
                            VStack(spacing: 4) {
                                Image(systemName: "ellipsis")
                                    .font(.system(size: 22, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                                Text("More")
                                    .font(.system(size: 10, weight: .medium))
                                    .foregroundColor(Color(UIColor.label).opacity(0.6))
                            }
                            .frame(maxWidth: .infinity)
                        }
                    }
                    .padding(.horizontal, 16)
                    .padding(.vertical, 16)
                    .padding(.bottom, 6)
                    .background(
                        Rectangle()
                            .fill(Color(UIColor.systemBackground))
                            .shadow(color: .black.opacity(0.1), radius: 1, x: 0, y: -1)
                            .ignoresSafeArea(edges: .bottom)
                    )
                    .overlay(
                        Rectangle()
                            .frame(height: 0.5)
                            .foregroundColor(Color(UIColor.separator))
                            .padding(.horizontal, 16),
                        alignment: .top
                    )
                }
                .ignoresSafeArea(edges: .bottom)
                .zIndex(1)
                
                // MARK: - More Menu Popup
                if showMoreMenu {
                    VStack {
                        Spacer()
                        
                        VStack(alignment: .leading, spacing: 0) {
                            Text("More Options")
                                .font(.headline)
                                .fontWeight(.bold)
                                .padding(.horizontal, 20)
                                .padding(.top, 20)
                                .padding(.bottom, 10)
                                .foregroundColor(.primary)
                            
                            Divider()
                                .padding(.horizontal, 16)
                            
                            VStack(spacing: 0) {
                                // Professional Services
                                NavigationLink(destination: PageEntrepreneurResources().navigationBarBackButtonHidden(true)) {
                                    HStack(spacing: 16) {
                                        Image(systemName: "briefcase.fill")
                                            .font(.system(size: 20))
                                            .foregroundColor(Color(hex: "004aad"))
                                            .frame(width: 24)
                                        
                                        VStack(alignment: .leading, spacing: 2) {
                                            Text("Professional Services")
                                                .font(.system(size: 16, weight: .medium))
                                                .foregroundColor(.primary)
                                            Text("Find business services and experts")
                                                .font(.system(size: 12))
                                                .foregroundColor(.secondary)
                                        }
                                        
                                        Spacer()
                                        
                                        Image(systemName: "chevron.right")
                                            .font(.system(size: 12, weight: .medium))
                                            .foregroundColor(.secondary)
                                    }
                                    .padding(.horizontal, 20)
                                    .padding(.vertical, 16)
                                }
                                .transaction { transaction in
                                    transaction.disablesAnimations = true
                                }
                                
                                Divider()
                                    .padding(.horizontal, 16)
                                
                                // News & Knowledge
                                NavigationLink(destination: PageEntrepreneurKnowledge().navigationBarBackButtonHidden(true)) {
                                    HStack(spacing: 16) {
                                        Image(systemName: "newspaper.fill")
                                            .font(.system(size: 20))
                                            .foregroundColor(Color(hex: "004aad"))
                                            .frame(width: 24)
                                        
                                        VStack(alignment: .leading, spacing: 2) {
                                            Text("News & Knowledge")
                                                .font(.system(size: 16, weight: .medium))
                                                .foregroundColor(.primary)
                                            Text("Stay updated with industry insights")
                                                .font(.system(size: 12))
                                                .foregroundColor(.secondary)
                                        }
                                        
                                        Spacer()
                                        
                                        Image(systemName: "chevron.right")
                                            .font(.system(size: 12, weight: .medium))
                                            .foregroundColor(.secondary)
                                    }
                                    .padding(.horizontal, 20)
                                    .padding(.vertical, 16)
                                }
                                .transaction { transaction in
                                    transaction.disablesAnimations = true
                                }
                                
                                Divider()
                                    .padding(.horizontal, 16)
                                
                                // The Circl Exchange
                                NavigationLink(destination: PageSkillSellingMatching().navigationBarBackButtonHidden(true)) {
                                    HStack(spacing: 16) {
                                        Image(systemName: "dollarsign.circle.fill")
                                            .font(.system(size: 20))
                                            .foregroundColor(Color(hex: "004aad"))
                                            .frame(width: 24)
                                        
                                        VStack(alignment: .leading, spacing: 2) {
                                            Text("The Circl Exchange")
                                                .font(.system(size: 16, weight: .medium))
                                                .foregroundColor(.primary)
                                            Text("Buy and sell skills and services")
                                                .font(.system(size: 12))
                                                .foregroundColor(.secondary)
                                        }
                                        
                                        Spacer()
                                        
                                        Image(systemName: "chevron.right")
                                            .font(.system(size: 12, weight: .medium))
                                            .foregroundColor(.secondary)
                                    }
                                    .padding(.horizontal, 20)
                                    .padding(.vertical, 16)
                                }
                                .transaction { transaction in
                                    transaction.disablesAnimations = true
                                }
                                
                                Divider()
                                    .padding(.horizontal, 16)
                                
                                // Settings
                                NavigationLink(destination: PageSettings().navigationBarBackButtonHidden(true)) {
                                    HStack(spacing: 16) {
                                        Image(systemName: "gearshape.fill")
                                            .font(.system(size: 20))
                                            .foregroundColor(Color(hex: "004aad"))
                                            .frame(width: 24)
                                        
                                        VStack(alignment: .leading, spacing: 2) {
                                            Text("Settings")
                                                .font(.system(size: 16, weight: .medium))
                                                .foregroundColor(.primary)
                                            Text("Manage your account settings")
                                                .font(.system(size: 12))
                                                .foregroundColor(.secondary)
                                        }
                                        
                                        Spacer()
                                        
                                        Image(systemName: "chevron.right")
                                            .font(.system(size: 12, weight: .medium))
                                            .foregroundColor(.secondary)
                                    }
                                    .padding(.horizontal, 20)
                                    .padding(.vertical, 16)
                                }
                                .transaction { transaction in
                                    transaction.disablesAnimations = true
                                }
                            }
                        }
                        .background(Color(UIColor.systemBackground))
                        .cornerRadius(16)
                        .shadow(color: .black.opacity(0.1), radius: 10, x: 0, y: -5)
                        .padding(.horizontal, 16)
                        .padding(.bottom, 20)
                    }
                    .background(
                        Color.black.opacity(0.4)
                            .ignoresSafeArea()
                            .onTapGesture {
                                withAnimation(.easeInOut(duration: 0.3)) {
                                    showMoreMenu = false
                                }
                            }
                    )
                    .zIndex(2)
=======
                
                // Tab Content
                switch selectedTab {
                case .dashboard:
                    dashboardContent
                case .home:
                    homeContent
                case .calendar:
                    calendarContent
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
                }
            }
            
            // Settings Menu Overlay
            if showSettingsMenu {
                SettingsMenuOverlay(
                    showSettingsMenu: $showSettingsMenu,
                    showCircleAboutPopup: $showCircleAboutPopup,
                    navigateToMembers: $navigateToMembers,
                    showLeaveConfirmation: $showLeaveConfirmation,
                    showManageChannels: $showManageChannels,
                    showDeleteConfirmation: $showDeleteConfirmation,
                    circle: circle,
                    userId: userId
                )
            }
            
            // Bottom Navigation
            BottomNavigationBar(showMoreMenu: $showMoreMenu)
            
            // More Menu Popup
            if showMoreMenu {
                MoreMenuPopup(showMoreMenu: $showMoreMenu)
            }
        }
        .onAppear {
            fetchAnnouncements(for: circle.id)
            fetchChannels(for: circle.id)
            fetchThreads(for: circle.id)
        }
        .sheet(isPresented: $showCreateAnnouncementPopup) {
            // MARK: - Create Announcement Popup
            VStack(spacing: 24) {
                // Header
                HStack {
                    Button("Cancel") {
                        showCreateAnnouncementPopup = false
                        newAnnouncementTitle = ""
                        newAnnouncementContent = ""
                    }
                    .foregroundColor(.secondary)
                    
                    Spacer()
                    
                    Text("New Announcement")
                        .font(.system(size: 20, weight: .bold))
                        .foregroundColor(.primary)
                    
                    Spacer()
                    
                    Button("Post") {
                        createAnnouncement()
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, 16)
                    .padding(.vertical, 8)
                    .background(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color(hex: "004aad"),
                                Color(hex: "0066ff")
                            ]),
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(Capsule())
                    .disabled(newAnnouncementTitle.isEmpty || newAnnouncementContent.isEmpty)
                    .opacity((newAnnouncementTitle.isEmpty || newAnnouncementContent.isEmpty) ? 0.6 : 1.0)
                }
                .padding(.horizontal, 20)
                .padding(.top, 20)
                
                VStack(alignment: .leading, spacing: 16) {
                    // Title field
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Title")
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.primary)
                        
                        TextField("Enter announcement title...", text: $newAnnouncementTitle)
                            .font(.system(size: 16))
                            .padding(.horizontal, 16)
                            .padding(.vertical, 12)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color(.systemGray6))
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(Color(hex: "004aad").opacity(0.3), lineWidth: 1)
                                    )
                            )
                    }
                    
                    // Content field
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Content")
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.primary)
                        
                        TextEditor(text: $newAnnouncementContent)
                            .font(.system(size: 15))
                            .frame(height: 120)
                            .padding(.horizontal, 12)
                            .padding(.vertical, 8)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color(.systemGray6))
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(Color(hex: "004aad").opacity(0.3), lineWidth: 1)
                                    )
                            )
                    }
                }
                .padding(.horizontal, 20)
                
                Spacer()
            }
            .background(Color(.systemBackground))
            .presentationDetents([.medium, .large])
        }
        .sheet(isPresented: $showCircleAboutPopup) {
            CirclPopupCard(circle: circle, isMember: true)
        }
        .sheet(isPresented: $showManageChannels) {
            ManageChannelsView(circleId: circle.id, channels: $channels)
                .onDisappear {
                    // Refresh channels when returning from manage view
                    fetchChannels(for: circle.id)
                }
        }
        .sheet(isPresented: $showCreateThreadPopup) {
            // MARK: - Create Thread Popup
            VStack(spacing: 24) {
                // Header
                HStack {
                    Button("Cancel") {
                        showCreateThreadPopup = false
                        newThreadContent = ""
                    }
                    .foregroundColor(.secondary)
                    
                    Spacer()
                    
                    Text("New Thread")
                        .font(.system(size: 20, weight: .bold))
                        .foregroundColor(.primary)
                    
                    Spacer()
                    
                    Button("Post") {
                        postNewThread()
                        showCreateThreadPopup = false
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, 16)
                    .padding(.vertical, 8)
                    .background(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color(hex: "004aad"),
                                Color(hex: "0066ff")
                            ]),
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(Capsule())
                    .disabled(newThreadContent.isEmpty)
                    .opacity(newThreadContent.isEmpty ? 0.6 : 1.0)
                }
                .padding(.horizontal, 20)
                .padding(.top, 20)
                
                VStack(alignment: .leading, spacing: 16) {
                    // Content field
                    VStack(alignment: .leading, spacing: 8) {
                        Text("What's on your mind?")
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.primary)
                        
                        TextEditor(text: $newThreadContent)
                            .font(.system(size: 15))
                            .frame(height: 150)
                            .padding(.horizontal, 12)
                            .padding(.vertical, 8)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color(.systemGray6))
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(Color(hex: "004aad").opacity(0.3), lineWidth: 1)
                                    )
                            )
                    }
                }
                .padding(.horizontal, 20)
                
                Spacer()
            }
            .background(Color(.systemBackground))
            .presentationDetents([.medium, .large])
        }
        
        // Settings Menu Overlay
        if showSettingsMenu {
            SettingsMenuOverlay(
                showSettingsMenu: $showSettingsMenu,
                showCircleAboutPopup: $showCircleAboutPopup,
                navigateToMembers: $navigateToMembers,
                showLeaveConfirmation: $showLeaveConfirmation,
                showManageChannels: $showManageChannels,
                showDeleteConfirmation: $showDeleteConfirmation,
                circle: circle,
                userId: userId
            )
        }
        
        NavigationLink(
            destination: MemberListPage(circleName: circle.name, circleId: circle.id),
            isActive: $navigateToMembers
        ) {
            EmptyView()
        }
        .alert("Leave Circle?", isPresented: $showLeaveConfirmation) {
            Button("Leave", role: .destructive) {
                leaveCircle()
            }
            Button("Cancel", role: .cancel) { }
        } message: {
            Text("Are you sure you want to leave this circle?")
        }
        
        .alert("Delete Circle", isPresented: $showDeleteConfirmation) {
            TextField("Type CIRCL to confirm", text: $deleteInputText)

            Button("Delete", role: .destructive) {
                if deleteInputText == "CIRCL" {
                    deleteCircle()
                }
            }

            Button("Cancel", role: .cancel) {
                deleteInputText = ""
            }
        } message: {
            Text("Are you sure? This action will permanently delete the circle and all its data.")
        }

        // Success Toast
        if showAnnouncementCreationSuccess {
            SuccessToast(
                isShowing: $showAnnouncementCreationSuccess,
                message: "Announcement created successfully!"
            )
        }
        }
    
<<<<<<< Updated upstream:pagegroupchats new

        .onAppear {
            print("🔄 PageGroupchats appeared - Circle ID: \(circle.id), User ID: \(userId)")
            fetchChannels(for: circle.id)
            fetchThreads(for: circle.id)
            fetchAnnouncements(for: circle.id)
            fetchMyCircles(userId: userId)
            
            // Add dummy announcement for preview
            addDummyAnnouncement()
            
            
            

            func fetchMyCircles(userId: Int) {
=======
    // MARK: - API Functions
    func fetchMyCircles(userId: Int) {
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
                URLSession.shared.dataTask(with: URL(string: "http://localhost:8000/api/circles/my_circles/\(userId)/")!) { data, _, _ in
                    guard let data = data else {
                        DispatchQueue.main.async {
                            self.loading = false
                        }
                        return
                    }
                    if let decoded: [CircleData] = try? JSONDecoder().decode([CircleData].self, from: data) {
                        DispatchQueue.main.async {
                            self.myCircles = decoded
                            self.loading = false
                        }
                    } else {
                        print("❌ Failed to decode my_circles")
                        DispatchQueue.main.async {
                            self.loading = false
                        }
                    }
                }.resume()
            }

<<<<<<< Updated upstream:pagegroupchats new
        }
    }
    
    // MARK: - Computed Properties
    var canPost: Bool {
        if isCreatingPoll {
            return !pollTitle.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty &&
                   pollOptions.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }.count >= 2
        } else {
            return !newThreadContent.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
        }
    }
    
    var canPostAnnouncement: Bool {
        return !newAnnouncementTitle.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty &&
               !newAnnouncementContent.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    // MARK: - Helper Functions
    func resetPostForm() {
        newThreadContent = ""
        isCreatingPoll = false
        pollTitle = ""
        pollOptions = ["", ""]
    }
    
    func resetAnnouncementForm() {
        newAnnouncementTitle = ""
        newAnnouncementContent = ""
    }

=======
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
    func fetchChannels(for circleId: Int) {
        guard let url = URL(string: "http://localhost:8000/api/circles/get_channels/\(circleId)/") else {
            print("❌ Invalid URL for fetchChannels")
            return
        }

        print("🌐 Fetching channels for circle: \(circleId)")
        print("📤 URL: \(url.absoluteString)")

        URLSession.shared.dataTask(with: url) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("❌ Network error fetching channels: \(error.localizedDescription)")
                    return
                }
                
                guard let httpResponse = response as? HTTPURLResponse else {
                    print("❌ Invalid response for fetchChannels")
                    return
                }
                
                print("📊 Channels API Status code: \(httpResponse.statusCode)")
                
                guard let data = data else {
                    print("❌ No data received for channels")
                    return
                }
                
                if let responseString = String(data: data, encoding: .utf8) {
                    print("📥 Channels API Response: \(responseString)")
                }
                
                if httpResponse.statusCode == 200 {
                    if let decoded = try? JSONDecoder().decode([Channel].self, from: data) {
                        print("✅ Successfully decoded \(decoded.count) channels")
                        self.channels = decoded
                    } else {
                        print("❌ Failed to decode channels JSON")
                        // Try to see the raw data structure
                        if let json = try? JSONSerialization.jsonObject(with: data) {
                            print("📋 Raw JSON structure: \(json)")
                        }
                    }
                } else {
                    print("❌ Server error fetching channels: \(httpResponse.statusCode)")
                }
            }
        }.resume()
    }
    
    func postNewThread() {
        guard let url = URL(string: "https://circlapp.online/api/circles/create_thread/") else { return }

        let body: [String: Any] = [
            "user_id": userId,
            "circle_id": circle.id,
            "content": newThreadContent
        ]

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)

        let task: URLSessionDataTask = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }

            DispatchQueue.main.async {
                newThreadContent = ""
                fetchThreads(for: circle.id)
            }
        }
        task.resume()
    }
    
<<<<<<< Updated upstream:pagegroupchats new
    func postNewPoll() {
        guard let url = URL(string: "http://localhost:8000/api/circles/create_poll/") else { return }

        let filteredOptions = pollOptions.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }
        
        let body: [String: Any] = [
            "user_id": userId,
            "circle_id": circle.id,
            "content": newThreadContent,
            "poll_title": pollTitle,
            "poll_options": filteredOptions
        ]

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)

        let task: URLSessionDataTask = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {
                print("Error creating poll: \(error?.localizedDescription ?? "Unknown error")")
                return
            }

            DispatchQueue.main.async {
                fetchThreads(for: circle.id)
            }
        }
        task.resume()
    }
    
    func postNewAnnouncement() {
        guard let url = URL(string: "http://localhost:8000/api/circles/create_announcement/") else { return }
        
=======
    // MARK: - Create Announcement Function
    func createAnnouncement() {
        guard let url = URL(string: "http://localhost:8000/api/circles/create_announcement/") else {
            print("❌ Invalid URL for createAnnouncement")
            return
        }

>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
        let body: [String: Any] = [
            "user_id": userId,
            "circle_id": circle.id,
            "title": newAnnouncementTitle,
            "content": newAnnouncementContent
        ]
<<<<<<< Updated upstream:pagegroupchats new
        
=======

>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)
<<<<<<< Updated upstream:pagegroupchats new
        
        let task: URLSessionDataTask = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {
                print("Error creating announcement: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            
            DispatchQueue.main.async {
                fetchAnnouncements(for: circle.id)
            }
        }
        task.resume()
    }
    
    func fetchAnnouncements(for circleId: Int) {
        guard let url = URL(string: "http://localhost:8000/api/circles/get_announcements/\(circleId)/") else { return }
        
        URLSession.shared.dataTask(with: url) { data, _, _ in
            if let data = data {
                print("📥 Raw Announcements JSON:")
                print(String(data: data, encoding: .utf8) ?? "nil")
                
                if let decoded = try? JSONDecoder().decode([AnnouncementModel].self, from: data) {
                    DispatchQueue.main.async {
                        self.announcements = decoded
                    }
                } else {
                    print("❌ Failed to decode announcements")
=======

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("❌ Error creating announcement: \(error)")
                    return
                }
                
                // Success - clear form and refresh announcements
                self.newAnnouncementTitle = ""
                self.newAnnouncementContent = ""
                self.showCreateAnnouncementPopup = false
                self.showAnnouncementCreationSuccess = true
                
                // Refresh announcements list
                self.fetchAnnouncements(for: self.circle.id)
                
                // Hide success message after 3 seconds
                DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                    self.showAnnouncementCreationSuccess = false
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
                }
            }
        }.resume()
    }
<<<<<<< Updated upstream:pagegroupchats new
    
    func addDummyAnnouncement() {
        // Add a dummy announcement for preview
        let dummyAnnouncement = AnnouncementModel(
            id: 999,
            user: "Circle Moderator",
            title: "Welcome to our Circle! 🎉",
            content: "Hello everyone! We're excited to have you join our community. Please take a moment to introduce yourself in the general channel and let us know what brings you here. Don't forget to check out our community guidelines and feel free to ask any questions!",
            announced_at: "2024-01-15T10:30:00Z"
        )
        
        DispatchQueue.main.async {
            if self.announcements.isEmpty {
                self.announcements = [dummyAnnouncement]
            }
        }
    }
=======
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift

    func leaveCircle() {
        guard let url = URL(string: "https://circlapp.online/api/circles/leave_circle/") else { return }

        let payload: [String: Any] = [
            "user_id": userId,
            "circle_id": circle.id
        ]

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)

        let task: URLSessionDataTask = URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                presentationMode.wrappedValue.dismiss()
            }
        }
        task.resume()
    }
    
    func deleteCircle() {
        guard let url = URL(string: "https://circlapp.online/api/circles/delete_circle/") else { return }

        let payload: [String: Any] = [
            "circle_id": circle.id,
            "user_id": userId
        ]

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)

        let task: URLSessionDataTask = URLSession.shared.dataTask(with: request) { data, _, _ in
            DispatchQueue.main.async {
                presentationMode.wrappedValue.dismiss()
            }
        }
        task.resume()
    }

    func fetchThreads(for circleId: Int) {
        guard let url = URL(string: "http://localhost:8000/api/circles/get_threads/\(circleId)/") else {
            loadSampleThreads() // Load sample data if URL fails
            return
        }

        URLSession.shared.dataTask(with: url) { data, _, error in
            if let error = error {
                print("❌ Error fetching threads: \(error)")
                DispatchQueue.main.async {
                    self.loadSampleThreads() // Fallback to sample data
                }
                return
            }
            
            if let data = data {
                print("📥 Threads Raw JSON:")
                print(String(data: data, encoding: .utf8) ?? "nil")

                if let decoded = try? JSONDecoder().decode([ThreadPost].self, from: data) {
                    DispatchQueue.main.async {
                        self.threads = decoded
                    }
                } else {
                    print("❌ Failed to decode threads")
                    DispatchQueue.main.async {
                        self.loadSampleThreads() // Fallback to sample data
                    }
                }
            } else {
                DispatchQueue.main.async {
                    self.loadSampleThreads() // Fallback to sample data
                }
            }
        }.resume()
    }
    
    // MARK: - Fetch Announcements Function
    func fetchAnnouncements(for circleId: Int) {
        guard let url = URL(string: "http://localhost:8000/api/circles/get_announcements/\(circleId)/") else {
            loadSampleAnnouncements() // Load sample data if URL fails
            return
        }

        URLSession.shared.dataTask(with: url) { data, _, error in
            if let error = error {
                print("❌ Error fetching announcements: \(error)")
                DispatchQueue.main.async {
                    self.loadSampleAnnouncements() // Fallback to sample data
                }
                return
            }
            
            if let data = data {
                print("📥 Announcements Raw JSON:")
                print(String(data: data, encoding: .utf8) ?? "nil")

<<<<<<< Updated upstream:pagegroupchats new

// MARK: - Thread Post Model
struct ThreadPost: Identifiable, Decodable {
    let id: Int
    let author: String
    let content: String
    let likes: Int
    let comments: Int
    let poll: PollData?
}

// MARK: - Poll Data Model
struct PollData: Identifiable, Decodable {
    let id: Int
    let title: String
    let options: [PollOption]
    let totalVotes: Int
    let hasVoted: Bool
    let userVote: Int?
    
    enum CodingKeys: String, CodingKey {
        case id, title, options
        case totalVotes = "total_votes"
        case hasVoted = "has_voted"
        case userVote = "user_vote"
    }
}

// MARK: - Poll Option Model
struct PollOption: Identifiable, Decodable {
    let id: Int
    let text: String
    let votes: Int
    let percentage: Double
}

// MARK: - Enhanced Thread Card View
struct ThreadCard: View {
    let thread: ThreadPost
    @AppStorage("user_id") private var userId: Int = 0

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            // Header with author and engagement stats
            HStack {
                HStack(spacing: 8) {
                    // Author avatar placeholder
                    Circle()
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [Color(hex: "004aad"), Color(hex: "0066dd")]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .frame(width: 32, height: 32)
                        .overlay(
                            Text(String(thread.author.prefix(1)).uppercased())
                                .font(.system(size: 14, weight: .semibold))
                                .foregroundColor(.white)
                        )
                    
                    VStack(alignment: .leading, spacing: 2) {
                        HStack(spacing: 6) {
                            Text(thread.author)
                                .font(.system(size: 15, weight: .semibold))
                                .foregroundColor(.primary)
                            
                            if thread.poll != nil {
                                Image(systemName: "chart.bar.fill")
                                    .font(.system(size: 12))
                                    .foregroundColor(Color(hex: "004aad"))
                            }
                        }
                        
                        Text("2 hours ago") // You can make this dynamic later
                            .font(.system(size: 12))
                            .foregroundColor(.secondary)
=======
                if let decoded = try? JSONDecoder().decode([AnnouncementModel].self, from: data) {
                    DispatchQueue.main.async {
                        self.announcements = decoded
                    }
                } else {
                    print("❌ Failed to decode announcements")
                    DispatchQueue.main.async {
                        self.loadSampleAnnouncements() // Fallback to sample data
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
                    }
                }
            }
        }.resume()
    }
    
    // MARK: - Load Sample Announcements
    func loadSampleAnnouncements() {
        announcements = [
            AnnouncementModel(
                id: 1,
                user: "CirclModerator",
                title: "Welcome to our Circle! 🎉",
                content: "Hello everyone! We're excited to have you join our community. Please take a moment to introduce yourself in the introductions channel and read our community guidelines. Looking forward to great discussions!",
                announced_at: "2024-12-20T10:30:00Z"
            ),
            AnnouncementModel(
                id: 2,
                user: "TechLead",
                title: "Weekly Networking Event 🚀",
                content: "Join us this Friday at 6 PM PST for our weekly virtual networking session. We'll be discussing emerging technologies and sharing insights from industry leaders. Don't miss this opportunity to connect with fellow entrepreneurs and innovators!",
                announced_at: "2024-12-19T15:45:00Z"
            ),
            AnnouncementModel(
                id: 3,
                user: "EventCoordinator",
                title: "New Partnership Program Launch 🤝",
                content: "We're thrilled to announce our new partnership program! This initiative will connect startups with potential collaborators and mentors. Applications are now open through our partnerships channel. Limited spots available - apply today!",
                announced_at: "2024-12-18T09:15:00Z"
            )
        ]
    }
    
    // MARK: - Load Sample Threads
    func loadSampleThreads() {
        threads = [
            ThreadPost(
                id: 1,
                author: "Alex Johnson",
                content: "What are your thoughts on the latest AI developments in our industry? I've been exploring some new machine learning frameworks and would love to hear about your experiences.",
                likes: 12,
                comments: 8
            ),
            ThreadPost(
                id: 2,
                author: "Sarah Chen",
                content: "Looking for feedback on my startup idea! I'm building a platform that connects small businesses with local suppliers. Would anyone be interested in a quick chat about market validation?",
                likes: 24,
                comments: 15
            ),
            ThreadPost(
                id: 3,
                author: "Marcus Rodriguez",
                content: "Just attended an amazing conference on sustainable technology. The insights on green energy solutions were incredible. Happy to share some key takeaways if anyone's interested!",
                likes: 18,
                comments: 6
            ),
            ThreadPost(
                id: 4,
                author: "Emily Davis",
                content: "Quick question for the community: What tools do you recommend for remote team collaboration? We're scaling up and need something that works well for both technical and non-technical team members.",
                likes: 9,
                comments: 12
            )
        ]
    }

<<<<<<< Updated upstream:pagegroupchats new
            // Thread content
            if !thread.content.isEmpty {
                Text(thread.content)
                    .font(.system(size: 15))
                    .foregroundColor(.primary)
                    .lineLimit(4)
                    .multilineTextAlignment(.leading)
            }
            
            // Poll section
            if let poll = thread.poll {
                PollView(poll: poll, threadId: thread.id)
            }

            // Engagement section
            HStack(spacing: 16) {
                HStack(spacing: 6) {
                    Image(systemName: thread.likes > 0 ? "heart.fill" : "heart")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(thread.likes > 0 ? .red : .secondary)
                    Text("\(thread.likes)")
                        .font(.system(size: 13, weight: .medium))
                        .foregroundColor(.secondary)
                }
                
                HStack(spacing: 6) {
                    Image(systemName: "bubble.right")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(.secondary)
                    Text("\(thread.comments)")
                        .font(.system(size: 13, weight: .medium))
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Button(action: {
                    // Share action
                }) {
                    Image(systemName: "square.and.arrow.up")
                        .font(.system(size: 14, weight: .medium))
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.06), radius: 10, x: 0, y: 4)
        )
        .overlay(
            RoundedRectangle(cornerRadius: 16)
                .stroke(Color(hex: "004aad").opacity(0.1), lineWidth: 1)
        )
=======
    private var headerSection: some View {
        GroupChatHeader(selectedTab: $selectedTab)
>>>>>>> Stashed changes:circl_test_app/circles/PageGroupchats.swift
    }
}

// MARK: - Poll View Component
struct PollView: View {
    let poll: PollData
    let threadId: Int
    @AppStorage("user_id") private var userId: Int = 0
    @State private var selectedOption: Int? = nil
    @State private var hasVoted: Bool = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            // Poll title
            Text(poll.title)
                .font(.system(size: 16, weight: .semibold))
                .foregroundColor(.primary)
            
            // Poll options
            VStack(spacing: 8) {
                ForEach(poll.options) { option in
                    PollOptionView(
                        option: option,
                        isSelected: selectedOption == option.id,
                        hasVoted: poll.hasVoted || hasVoted,
                        totalVotes: poll.totalVotes,
                        onTap: {
                            if !poll.hasVoted && !hasVoted {
                                selectedOption = option.id
                                voteOnPoll(optionId: option.id)
                            }
                        }
                    )
                }
            }
            
            // Vote count
            HStack {
                Text("\(poll.totalVotes) vote\(poll.totalVotes == 1 ? "" : "s")")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(.secondary)
                
                Spacer()
                
                if poll.hasVoted || hasVoted {
                    HStack(spacing: 4) {
                        Image(systemName: "checkmark.circle.fill")
                            .font(.system(size: 12))
                            .foregroundColor(.green)
                        Text("Voted")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.green)
                    }
                }
            }
        }
        .padding(12)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Color(hex: "004aad").opacity(0.05))
        )
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color(hex: "004aad").opacity(0.2), lineWidth: 1)
        )
        .onAppear {
            hasVoted = poll.hasVoted
            selectedOption = poll.userVote
        }
    }
    
    private func voteOnPoll(optionId: Int) {
        guard let url = URL(string: "http://localhost:8000/api/circles/vote_poll/") else { return }
        
        let body: [String: Any] = [
            "user_id": userId,
            "poll_option_id": optionId
        ]
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                if error == nil {
                    hasVoted = true
                }
            }
        }.resume()
    }
}

// MARK: - Poll Option View Component
struct PollOptionView: View {
    let option: PollOption
    let isSelected: Bool
    let hasVoted: Bool
    let totalVotes: Int
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 12) {
                // Option indicator
                Group {
                    if hasVoted {
                        if isSelected {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(Color(hex: "004aad"))
                        } else {
                            Circle()
                                .stroke(Color.secondary.opacity(0.5), lineWidth: 2)
                                .frame(width: 20, height: 20)
                        }
                    } else {
                        Circle()
                            .stroke(isSelected ? Color(hex: "004aad") : Color.secondary.opacity(0.5), lineWidth: 2)
                            .frame(width: 20, height: 20)
                            .overlay(
                                Circle()
                                    .fill(isSelected ? Color(hex: "004aad") : Color.clear)
                                    .frame(width: 12, height: 12)
                            )
                    }
                }
                .frame(width: 20, height: 20)
                
                // Option text and percentage
                VStack(alignment: .leading, spacing: 2) {
                    HStack {
                        Text(option.text)
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.primary)
                            .multilineTextAlignment(.leading)
                        
                        Spacer()
                        
                        if hasVoted {
                            Text("\(Int(option.percentage))%")
                                .font(.system(size: 12, weight: .semibold))
                                .foregroundColor(Color(hex: "004aad"))
                        }
                    }
                    
                    // Progress bar for voted polls
                    if hasVoted {
                        GeometryReader { geometry in
                            ZStack(alignment: .leading) {
                                Rectangle()
                                    .fill(Color.secondary.opacity(0.2))
                                    .frame(height: 4)
                                    .cornerRadius(2)
                                
                                Rectangle()
                                    .fill(
                                        LinearGradient(
                                            gradient: Gradient(colors: [Color(hex: "004aad"), Color(hex: "0066dd")]),
                                            startPoint: .leading,
                                            endPoint: .trailing
                                        )
                                    )
                                    .frame(width: max(0, geometry.size.width * (option.percentage / 100)), height: 4)
                                    .cornerRadius(2)
                            }
                        }
                        .frame(height: 4)
                    }
                }
            }
            .padding(.vertical, 4)
        }
        .buttonStyle(PlainButtonStyle())
        .disabled(hasVoted)
    }
}

// MARK: - Menu Item Component
struct MenuItem2: View {
    let icon: String
    let title: String

    var body: some View {
        Button(action: {
            // Action for each menu item
        }) {
            HStack {
                Image(systemName: icon)
                    .foregroundColor(Color(hex: "004aad"))
                    .frame(width: 24)
                Text(title)
                    .foregroundColor(.primary)
                Spacer()
            }
            .padding(.horizontal)
            .padding(.vertical, 12)
            .contentShape(Rectangle())
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Preview
struct PageGroupchats_Previews: PreviewProvider {
    static var previews: some View {
        // Fixed: CircleData expects channels as [String], not [Channel]
        let sampleChannels = ["#Welcome", "#Founder-Chat", "#Introductions"]

        PageGroupchats(circle: CircleData(
            id: 1,
            name: "Lean Startup-lists",
            industry: "Tech",
            memberCount: 1200,
            imageName: "leanstartups",
            pricing: "Free",
            description: "A community of founders",
            joinType: .joinNow,
            channels: sampleChannels,
            creatorId: 999,
            isModerator: false
        ))
    }
}

// MARK: - Announcement Banner Component
struct AnnouncementBanner: View {
    let announcement: AnnouncementModel
    @State private var isExpanded = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack(spacing: 12) {
                // Megaphone icon
                Image(systemName: "megaphone.fill")
                    .font(.system(size: 18, weight: .medium))
                    .foregroundColor(.white)
                
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text(announcement.title)
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.white)
                        
                        Spacer()
                        
                        Button(action: {
                            withAnimation(.easeInOut(duration: 0.3)) {
                                isExpanded.toggle()
                            }
                        }) {
                            Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(.white.opacity(0.8))
                        }
                    }
                    
                    Text("By \(announcement.user)")
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(.white.opacity(0.8))
                }
            }
            
            if isExpanded {
                Text(announcement.content)
                    .font(.system(size: 14))
                    .foregroundColor(.white)
                    .lineLimit(nil)
                    .padding(.leading, 30) // Align with title
            }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            LinearGradient(
                gradient: Gradient(colors: [Color(hex: "004aad"), Color(hex: "0066dd")]),
                startPoint: .leading,
                endPoint: .trailing
            )
        )
        .cornerRadius(12)
        .shadow(color: Color(hex: "004aad").opacity(0.3), radius: 6, x: 0, y: 3)
    }
}

// Placeholder views for navigation destinations
struct PageMessages2: View {
    var body: some View {
        Text("Messages View")
    }
}

struct ProfilePage2: View {
    var body: some View {
        Text("Profile View")
    }
}

struct PageCircleMessages2: View {
    var body: some View {
        Text("Channel Messages View")
    }
}




struct PageGroupchatsWrapper: View {
    @State private var myCircles: [CircleData] = []
    @AppStorage("user_id") private var userId: Int = 0
    @State private var loading = true
    @AppStorage("last_circle_id") private var lastCircleId: Int = 0

    var body: some View {
        Group {
            if loading {
                ProgressView()
            } else if myCircles.isEmpty {
                VStack(spacing: 0) {
                    CirclHeader()

                    Spacer()

                    VStack(spacing: 16) {
                        Text("You're not in any Circls yet!")
                            .font(.title3)
                            .multilineTextAlignment(.center)
                            .padding()

                        NavigationLink(destination: PageCircles(showMyCircles: true).navigationBarBackButtonHidden(true)) {
                            Text("Explore Circls")
                                .foregroundColor(.white)
                                .padding()
                                .background(Color.blue)
                                .cornerRadius(12)
                        }
                    }

                    Spacer()
                }
            } else {
                if let savedCircle = myCircles.first(where: { $0.id == lastCircleId }) {
                    PageGroupchats(circle: savedCircle)
                } else {
                    PageGroupchats(circle: myCircles[0]) // fallback to first circle
                }
            }
        }
        .onAppear {
            fetchMyCircles()
        }
        
    }

    func fetchMyCircles() {
        // Local API model for this function
        struct LocalAPICircle: Identifiable, Decodable {
            let id: Int
            let name: String
            let industry: String
            let pricing: String
            let description: String
            let join_type: String
            let channels: [String]?
            let creator_id: Int
            let is_moderator: Bool?
            let member_count: Int?
        }
        
        guard let url = URL(string: "http://localhost:8000/api/circles/my_circles/\(userId)/") else { return }

        URLSession.shared.dataTask(with: url) { data, _, _ in
            if let data = data,
               let decoded = try? JSONDecoder().decode([LocalAPICircle].self, from: data) {
                DispatchQueue.main.async {
                    self.myCircles = decoded.map { apiCircle in
                        return CircleData(
                            id: apiCircle.id,
                            name: apiCircle.name,
                            industry: apiCircle.industry,
                            memberCount: apiCircle.member_count ?? 0,
                            imageName: "uhmarketing",
                            pricing: apiCircle.pricing,
                            description: apiCircle.description,
                            joinType: apiCircle.join_type == "apply_now" ? JoinType.applyNow : JoinType.joinNow,
                            channels: apiCircle.channels ?? [],
                            creatorId: apiCircle.creator_id,
                            isModerator: apiCircle.is_moderator ?? false
                        )
                    }
                    self.loading = false
                }
            } else {
                DispatchQueue.main.async {
                    self.loading = false
                }
            }
        }.resume()
    }
}



struct CirclHeader: View {
    var body: some View {
        VStack(spacing: 0) {
            HStack {
                VStack(alignment: .leading, spacing: 5) {
                    Text("Circl.")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.white)

                    
                }

                Spacer()

                VStack(alignment: .trailing, spacing: 5) {
                    HStack(spacing: 10) {
                        NavigationLink(destination: PageMessages().navigationBarBackButtonHidden(true)) {
                            Image(systemName: "bubble.left.and.bubble.right.fill")
                                .resizable()
                                .frame(width: 40, height: 30)
                                .foregroundColor(.white)
                        }

                        NavigationLink(destination: ProfilePage().navigationBarBackButtonHidden(true)) {
                            Image(systemName: "person.circle.fill")
                                .resizable()
                                .frame(width: 40, height: 40)
                                .foregroundColor(.white)
                        }
                    }
                }
            }
            .padding(.horizontal)
            .padding(.top, 15)
            .padding(.bottom, 10)
            .background(Color(hex: "004aad"))
        }
    }
}

// MARK: - Group Menu Item Component
struct GroupMenuItem: View {
    let icon: String
    let title: String
    var isDestructive: Bool = false

    var body: some View {
        HStack {
            Image(systemName: icon)
                .foregroundColor(isDestructive ? .red : Color(hex: "004aad"))
                .frame(width: 24)
            Text(title)
                .foregroundColor(isDestructive ? .red : .primary)
            Spacer()
        }
        .padding(.horizontal)
        .padding(.vertical, 12)
        .contentShape(Rectangle())
    }
}